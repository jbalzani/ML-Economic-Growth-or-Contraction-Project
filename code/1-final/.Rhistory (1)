# for (i in (k + 1):nrow(combined_data_train)) {
#   xtrain <- x[1:(k + i), ]
#   ytrain <- y[1:(k + i)]
#   xpred <- x[1:(k + i + 1), ]
#   ypred <- y[k + i + 1]
#   model_list <- sapply(lambda, function(lambda) {
#     glmnet(xtrain, ytrain, alpha = 0, lambda = lambda, family = "binomial")
#   })
#   preds[, i] <- predict(model_list, xpred)
#   accuracy[i] <- mean(preds[, i] == ypred)
# }
#
# optimal_lambda <- labmda[which.max(accuracy)]
# optimal_reglogit_model <- model_list[optimal_lambda]
#train knn algorithm on training set
set.seed(1)
#values of k to test
k <- seq(3, 25, 1)
#calculate accuracies for different k values
train_accuracy <- sapply(k, function(ks) {
knn_model <- knn3(gdp_impr ~ CLI_lag_nml + CLI_lag2_nml + CLI_lag3_nml +
real_gdp_growth_lag_nml + real_gdp_growth_lag2_nml +
real_gdp_growth_lag3_nml, data = combined_data_train, k = ks)
mean(knn_model$learn$y == combined_data_train$gdp_impr)
})
best_k <- k[which.max(train_accuracy)]
#knn model for optimal k
knn_model <- knn3(gdp_impr ~ CLI_lag + CLI_lag2 + CLI_lag3 + real_gdp_growth_lag + real_gdp_growth_lag2 + real_gdp_growth_lag3, data = combined_data_train, k = best_k)
#wf valid
set.seed(1)
y_hat_knn_wf <- rep(NA, nrow(combined_data_test))
for (i in 1:nrow(combined_data_test)) {
train_window <- combined_data[1:(106 + i - 1), ]
test_window <- combined_data[106 + i, ]
knn_model <- knn3(gdp_impr ~ CLI_lag_nml + CLI_lag2_nml + CLI_lag3_nml +
real_gdp_growth_lag_nml + real_gdp_growth_lag2_nml +
real_gdp_growth_lag3_nml, data = train_window)
y_hat_knn_wf[i] <- predict(knn_model, test_window, type = "class")
}
#wf valid
set.seed(1)
y_hat_knn_wf <- rep(NA, nrow(combined_data_test))
for (i in 1:(nrow(combined_data_test) - 1)) {
train_window <- combined_data[1:(106 + i - 1), ]
test_window <- combined_data[106 + i, ]
knn_model <- knn3(gdp_impr ~ CLI_lag_nml + CLI_lag2_nml + CLI_lag3_nml +
real_gdp_growth_lag_nml + real_gdp_growth_lag2_nml +
real_gdp_growth_lag3_nml, data = train_window)
y_hat_knn_wf[i] <- predict(knn_model, test_window, type = "class")
}
#load libraries
library(glmnet)
library(readr)
library(lubridate)
library(dynlm)
library(tidyverse)
library(Metrics)
library(caret)
library(randomForest)
library(latticeExtra)
#load libraries
library(glmnet)
library(readr)
library(lubridate)
library(dynlm)
library(tidyverse)
library(Metrics)
library(caret)
library(randomForest)
library(latticeExtra)
knitr::opts_chunk$set(echo = FALSE)
#load libraries
library(glmnet)
library(readr)
library(lubridate)
library(dynlm)
library(tidyverse)
library(Metrics)
library(caret)
library(randomForest)
library(latticeExtra)
#import gdp growth data
download.file("https://raw.githubusercontent.com/jbalzani/edx-Economic-Growth-or-Contraction-Project/master/A191RL1Q225SBEA.csv", "A191RL1Q225SBEA.csv")
real_gdp_growth <- read_csv("A191RL1Q225SBEA.csv")
#import cli data
download.file("https://raw.githubusercontent.com/jbalzani/edx-Economic-Growth-or-Contraction-Project/master/OECDLOLITOAASTSAM.csv", "OECDLOLITOAASTSAM.csv")
cli <- read_csv("OECDLOLITOAASTSAM.csv")
real_gdp_growth <- real_gdp_growth %>% mutate(real_gdp_growth = A191RL1Q225SBEA)
cli <- cli %>% mutate(cli = OECDLOLITOAASTSAM)
#check for NAs in gdp data
real_gdp_growth %>% filter(is.na(DATE))
real_gdp_growth %>% filter(is.na(real_gdp_growth))
#check for duplicates gdp
gdp_duplicates <- real_gdp_growth[duplicated(real_gdp_growth), ]
gdp_duplicates
#calculate min and max of rating
gdp_min <- min(real_gdp_growth$real_gdp_growth)
gdp_max <- max(real_gdp_growth$real_gdp_growth)
#boxplot of gdp growth
boxplot(real_gdp_growth$real_gdp_growth, main = "Figure 1: Boxplot of GDP Growth")
#check for NAs in cli data
cli %>% filter(is.na(DATE))
cli %>% filter(is.na(cli))
#check for duplicates
cli_duplicates <- cli[duplicated(cli), ]
cli_duplicates
#calculate min and max of CLI
cli_min <- min(cli$cli)
cli_max <- max(cli$cli)
#boxplot of cli
boxplot(cli$cli, main = "Figure 2: Boxplot of CLI Data")
#histogram of cli
hist(cli$cli, main = "Figure 3: Histogram of CLI Data", xlab = "CLI")
#get only the months that have qtly gdp data
CLI_filtered <- cli %>%
filter(DATE >= '1982-01-01') %>%
mutate(MONTH = month(DATE)) %>% #extract month
filter(MONTH %in% c(1, 4, 7, 10))#filter for months with qtly gdp data
#combine datasets
combined_data <- real_gdp_growth %>%    #start with gdp growth dataset
mutate(MONTH = CLI_filtered$MONTH) %>%    #add month variable
mutate(CLI = CLI_filtered$cli) %>%    #add CLI variable
mutate(real_gdp_growth = real_gdp_growth) %>%    #create col with shorter name
mutate(gdp_impr = factor(ifelse(real_gdp_growth > 0, 1, 0)))   #create y/n dependent var.
#create train and test data
combined_data_train <- combined_data %>% filter(DATE >= "1983-01-01" & DATE < "2008-07-01")
combined_data_test <- combined_data %>% filter(DATE >= "2008-07-01")
#sample size min for probit model
k <- 2 #number of independent variables
p <- sum(combined_data_train$gdp_impr == 0)/nrow(combined_data_train)
min_n <- 10*k/p
#plot real gdp growth and CLI for train data
combined_data_train %>% ggplot(aes(x = DATE)) +
geom_line(aes(y = CLI, color = "CLI")) +
geom_line(aes(y = real_gdp_growth, color = "real_gdp_growth")) +
ggtitle("Figure 4: Real GDP Growth and CLI 1983-Apr 2008")
#plot gdp impr and cli
plot_impr_cli <- xyplot(gdp_impr ~ CLI, data = combined_data_train, main = "Figure 5: gdp_impr vs. CLI")
plot_impr_cli
#make combined data a ts object, needed for stationarity test
combined_data_train_ts <- combined_data_train %>% ts()
#create lags of gdp growth
combined_data <- combined_data %>%
mutate(real_gdp_growth_lag = lag(real_gdp_growth),
real_gdp_growth_lag2 = lag(real_gdp_growth, 2),
real_gdp_growth_lag3 = lag(real_gdp_growth, 3),
real_gdp_growth_lag4 = lag(real_gdp_growth, 4))
#create first differences of lagged gdp growth
combined_data <- combined_data %>%
mutate(delta_real_gdp_growth = real_gdp_growth - real_gdp_growth_lag,
delta_real_gdp_growth_lag = real_gdp_growth_lag - lag(real_gdp_growth_lag),
delta_real_gdp_growth_lag2 = real_gdp_growth_lag2 - lag(real_gdp_growth_lag2),
delta_real_gdp_growth_lag3 = real_gdp_growth_lag3 - lag(real_gdp_growth_lag3),
delta_real_gdp_growth_lag4 = real_gdp_growth_lag4 - lag(real_gdp_growth_lag4))
#filter to include all lags and up to 2008 recession
combined_data_train <- combined_data %>% filter(DATE >= "1983-01-01" & DATE < "2008-07-01")
combined_data_test <- combined_data %>% filter(DATE >= "2008-07-01")
#make combined data a ts object, needed for stationarity test
combined_data_train_ts <- combined_data_train %>% ts()
#adf test for gdp growth 4 lags
reg_gdp_adf_lags1234 <- dynlm(delta_real_gdp_growth~real_gdp_growth_lag + delta_real_gdp_growth_lag + delta_real_gdp_growth_lag2 + delta_real_gdp_growth_lag3 + delta_real_gdp_growth_lag4, data = combined_data_train_ts)
#create summary
reg_gdp_adf_lags1234summ <- summary(reg_gdp_adf_lags1234)
reg_gdp_adf_lags1234summ
#adf test gdp growth 3 lags
reg_gdp_adf_lags123 <- dynlm(delta_real_gdp_growth~real_gdp_growth_lag + delta_real_gdp_growth_lag + delta_real_gdp_growth_lag2 + delta_real_gdp_growth_lag3, data = combined_data_train_ts)
#create summary
reg_gdp_adf_lags123summ <- summary(reg_gdp_adf_lags123)
reg_gdp_adf_lags123summ
#adf test gdp growth 2 lags
reg_gdp_adf_lags12 <- dynlm(delta_real_gdp_growth~real_gdp_growth_lag + delta_real_gdp_growth_lag + delta_real_gdp_growth_lag2, data = combined_data_train_ts)
#create summary
reg_gdp_adf_lags12summ <- summary(reg_gdp_adf_lags12)
reg_gdp_adf_lags12summ
#adf test gdp growth 1 lag
reg_gdp_adf_lag1 <- dynlm(delta_real_gdp_growth~real_gdp_growth_lag + delta_real_gdp_growth_lag, data = combined_data_train_ts)
#create summary
reg_gdp_adf_lag1summ <- summary(reg_gdp_adf_lag1)
reg_gdp_adf_lag1summ
#create cli lags
combined_data <- combined_data %>%
mutate(CLI_lag = lag(CLI),
CLI_lag2 = lag(CLI, 2),
CLI_lag3 = lag(CLI, 3),
CLI_lag4 = lag(CLI, 4))
#create cli first difference lags
combined_data <- combined_data %>%
mutate(delta_CLI = CLI - CLI_lag,
delta_CLI_lag = CLI_lag - CLI_lag2,
delta_CLI_lag2 = CLI_lag2 - CLI_lag3,
delta_CLI_lag3 = CLI_lag3 - lag(CLI_lag3),
delta_CLI_lag4 = CLI_lag4 - lag(CLI_lag4))
#filter to include all lags and up to 2008 recession - must do this before standardization
#and normalization in order to not use test data when calculating sd, max, min
#that would be overfitting
combined_data_train <- combined_data %>% filter(DATE >= "1983-01-01" & DATE < "2008-07-01")
#standardize the predictors for ridge regularization method
#using method described on about page 215 or so of Intro to Stat Learning
combined_data <- combined_data %>%
mutate(real_gdp_growth_lag_stnd = real_gdp_growth_lag/sd(combined_data_train$real_gdp_growth_lag),
real_gdp_growth_lag2_stnd = real_gdp_growth_lag2/sd(combined_data_train$real_gdp_growth_lag2),
real_gdp_growth_lag3_stnd = real_gdp_growth_lag3/sd(combined_data_train$real_gdp_growth_lag3),
CLI_lag_stnd = CLI_lag/sd(combined_data_train$CLI_lag),
CLI_lag2_stnd = CLI_lag2/sd(combined_data_train$CLI_lag2),
CLI_lag3_stnd = CLI_lag3/sd(combined_data_train$CLI_lag3))
#normalize the predictors for knn algorithm
#use training data max and min as max and min - if there is a value outside that range in test data, then set it equal to the max or min value (0 or 1)
f <- function(x) {(x - gdp_min)/(gdp_max - gdp_min)}
g <- function(x) {(x - cli_min)/(cli_max - cli_min)}
combined_data <- combined_data %>%
mutate(real_gdp_growth_lag_nml = f(real_gdp_growth_lag),
real_gdp_growth_lag2_nml = f(real_gdp_growth_lag2),
real_gdp_growth_lag3_nml = f(real_gdp_growth_lag3),
CLI_lag_nml = g(CLI_lag),
CLI_lag2_nml = g(CLI_lag2),
CLI_lag3_nml = g(CLI_lag3))
#create the train and test sets
combined_data_train <- combined_data %>% filter(DATE >= "1983-01-01" & DATE < "2008-07-01")
combined_data_test <- combined_data %>% filter(DATE >= "2008-07-01")
#make combined data a ts object, needed for stationarity test
combined_data_train_ts <- combined_data_train %>% ts()
#adf test cli 4 lags
reg_CLI_lags1234 <- dynlm(delta_CLI~CLI_lag + delta_CLI_lag + delta_CLI_lag2 + delta_CLI_lag3 + delta_CLI_lag4, data = combined_data_train_ts)
#create summary
reg_CLI_lags1234summ <- summary(reg_CLI_lags1234)
reg_CLI_lags1234summ
#create cli lags 5-8
combined_data <- combined_data %>%
mutate(CLI_lag5 = lag(CLI, 5),
CLI_lag6 = lag(CLI, 6),
CLI_lag7 = lag(CLI, 7),
CLI_lag8 = lag(CLI, 8))
#create cli first difference lags 5-8
combined_data <- combined_data %>%
mutate(delta_CLI_lag5 = CLI_lag5 - lag(CLI_lag5),
delta_CLI_lag6 = CLI_lag6 - lag(CLI_lag6),
delta_CLI_lag7 = CLI_lag7 - lag(CLI_lag7),
delta_CLI_lag8 = CLI_lag8 - lag(CLI_lag8))
#filter to include all lags and up to 2008 recession
combined_data <- combined_data %>% filter(DATE >= "1983-01-01")
combined_data_train <- combined_data %>% filter(DATE >= "1983-01-01" & DATE < "2008-07-01")
combined_data_test <- combined_data %>% filter(DATE >= "2008-07-01")
#make combined data a ts object, needed for stationarity test
combined_data_train_ts <- combined_data_train %>% ts()
#adf test cli 8 lags
reg_CLI_8lags <- dynlm(delta_CLI~CLI_lag + delta_CLI_lag + delta_CLI_lag2 + delta_CLI_lag3 + delta_CLI_lag4 + delta_CLI_lag5 + delta_CLI_lag6 + delta_CLI_lag7 + delta_CLI_lag8, data = combined_data_train_ts)
#create summary
reg_CLI_8lagssumm <- summary(reg_CLI_8lags)
reg_CLI_8lagssumm
#adf test cli 7 lags
reg_CLI_7lags <- dynlm(delta_CLI~CLI_lag + delta_CLI_lag + delta_CLI_lag2 + delta_CLI_lag3 + delta_CLI_lag4 + delta_CLI_lag5 + delta_CLI_lag6 + delta_CLI_lag7, data = combined_data_train_ts)
#create summary
reg_CLI_7lagssumm <- summary(reg_CLI_7lags)
reg_CLI_7lagssumm
#adf test cli 6 lags
reg_CLI_6lags <- dynlm(delta_CLI~CLI_lag + delta_CLI_lag + delta_CLI_lag2 + delta_CLI_lag3 + delta_CLI_lag4 + delta_CLI_lag5 + delta_CLI_lag6, data = combined_data_train_ts)
#create summary
reg_CLI_6lagssumm <- summary(reg_CLI_6lags)
reg_CLI_6lagssumm
#adf test cli 5 lags
reg_CLI_5lags <- dynlm(delta_CLI~CLI_lag + delta_CLI_lag + delta_CLI_lag2 + delta_CLI_lag3 + delta_CLI_lag4 + delta_CLI_lag5, data = combined_data_train_ts)
#create summary
reg_CLI_5lagssumm <- summary(reg_CLI_5lags)
reg_CLI_5lagssumm
acfs_gdp <- acf(real_gdp_growth$real_gdp_growth, lag.max = 12, na.action = na.pass,
main = "Figure 3: ACFs of Lags of Real GDP Growth")
pacfs_gdp <- pacf(real_gdp_growth$real_gdp_growth, lag.max = 12, na.action = na.pass,
main = "Figure 4: PACFs of Lags of Real GDP Growth")
acfs_cli <- acf(cli$cli, lag.max = 12, na.action = na.pass,
main = "Figure 5: ACFs of Lags of CLI")
pacfs_cli <- pacf(cli$cli, lag.max = 12, na.action = na.pass,
main = "Figure 6: PACFs of Lags of CLI")
combined_data_train %>% ggplot(aes(x = DATE, y = CLI)) +
geom_line() +
ggtitle("Figure 7: CLI")
library(forecast)
ts_cli <- ts(combined_data_train$CLI,
start = min(year(combined_data_train$DATE)),
end = max(year(combined_data_train$DATE)),
frequency = 4)
ggseasonplot(ts_cli, year.labels = TRUE, continuous = TRUE, main = "Figure 8: Seasonal Plot of CLI")
#logistic regression model
# logistic_model_all <- glm(formula = gdp_impr ~ CLI_lag + CLI_lag2 + CLI_lag3 + real_gdp_growth_lag + real_gdp_growth_lag3, family = binomial(link = "logit"), data = combined_data_train, maxit = 1000000)
set.seed(1)
p_hat_logistic_wf <- rep(NA, nrow(combined_data_test))
for (i in 1:nrow(combined_data_test)) {
train_window <- combined_data[1:(106 + i - 1), ]
pred_window <- combined_data[106 + i, ]
logistic_model_all <- glm(gdp_impr ~ CLI_lag + CLI_lag2 + CLI_lag3 + real_gdp_growth_lag + real_gdp_growth_lag3, family = binomial(link = "logit"), data = train_window)
p_hat_logistic_wf[i] <- predict(logistic_model_all, pred_window, type = "response")
}
y_hat_logistic_wf <- ifelse(p_hat_logistic_wf > 0.5, 1, 0)
small_data_train <- combined_data_train %>%
select(real_gdp_growth_lag_stnd,
real_gdp_growth_lag2_stnd,
real_gdp_growth_lag3_stnd,
CLI_lag_stnd,
CLI_lag2_stnd,
CLI_lag3_stnd,
gdp_impr)  #predictors
x <- model.matrix(gdp_impr ~ ., small_data_train)[, -1]
y <- ifelse(combined_data_train$gdp_impr == "1", 1, 0) #outcome
k <- 0
preds <- rep(NA, nrow(combined_data_train) - k - 1)
accuracy <- rep(NA, nrow(combined_data_train) - k - 1)
preds1 <- preds
accuracy1 <- accuracy
lambda <- seq(1, 50, 1)
#create regularized logistic regression - no cross validation, using lambda of 1
reglogit_model <- glmnet(x, y, alpha = 0, lambda = 1, family = "binomial")
##identical models when y is a factor or numeric
small_data_test <- combined_data_test %>%
select(real_gdp_growth_lag_stnd,
real_gdp_growth_lag2_stnd,
real_gdp_growth_lag3_stnd,
CLI_lag_stnd,
CLI_lag2_stnd,
CLI_lag3_stnd,
gdp_impr)
x.test <- model.matrix(gdp_impr ~ ., small_data_test)[,-1]
p_hat_reglogit <- predict(reglogit_model, newx = x.test, type = "response")
y_hat_reglogit <- ifelse(p_hat_reglogit > 0.5, 1, 0)
mean(y_hat_reglogit == combined_data_test$gdp_impr)
# small_data <- combined_data %>%
#  select(real_gdp_growth_lag_stnd,
#        real_gdp_growth_lag2_stnd,
#        real_gdp_growth_lag3_stnd,
#        CLI_lag_stnd,
#        CLI_lag2_stnd,
#        CLI_lag3_stnd,
#        gdp_impr)  #predictors
# x <- model.matrix(gdp_impr ~ ., small_data)[, -1]
# y <- ifelse(combined_data$gdp_impr == "1", 1, 0) #outcome
#
# p_hat_reglogit_wf <- rep(NA, nrow(combined_data_test))
# set.seed(1)
# for (i in 1:nrow(combined_data_test)) {
#   xtrain <- model.matrix(gdp_impr ~ ., small_data[1:(106 + i - 1), ])[, -1]
#   ytrain <- y[1:(106 + i - 1)]
#   xtest <- model.matrix(gdp_impr ~ ., small_data[106 + i, ])[, -1]
#   model <- glmnet(xtrain, ytrain, family = "binomial", alpha = 0, lambda = 1)
#   p_hat_reglogit_wf[i] <- predict(model, newx = xtest, type = "response")
# }
#
# y_hat_reglogit_wf <- ifelse(p_hat_reglogit_wf > 0.5, 1, 0)
# #test glmnet function with basic wf validation - creates a regularized logistic regression model using a walk forward cross validation process but doesn't optimize lambda
# set.seed(1)
# for (i in 1:(nrow(combined_data_train) - k)) {
#   xtrain <- x[1:(k + i), ]
#   ytrain <- y[1:(k + i)]
#   xpred <- x[1:(k + i + 1), ]
#   ypred <- y[1:(k + i + 1)]
#   model <- glmnet(xtrain, ytrain, alpha = 0, lambda = 1, family = "binomial")
#   preds1[i] <- predict(model, ypred)
#   accuracy1[i] <- mean(preds1[i] == ypred)
# }
#
#
# #cross validation to find the optimal lambda
# set.seed(1)
# for (i in (k + 1):nrow(combined_data_train)) {
#   xtrain <- x[1:(k + i), ]
#   ytrain <- y[1:(k + i)]
#   xpred <- x[1:(k + i + 1), ]
#   ypred <- y[k + i + 1]
#   model_list <- sapply(lambda, function(lambda) {
#     glmnet(xtrain, ytrain, alpha = 0, lambda = lambda, family = "binomial")
#   })
#   preds[, i] <- predict(model_list, xpred)
#   accuracy[i] <- mean(preds[, i] == ypred)
# }
#
# optimal_lambda <- labmda[which.max(accuracy)]
# optimal_reglogit_model <- model_list[optimal_lambda]
#train knn algorithm on training set
set.seed(1)
#values of k to test
k <- seq(3, 25, 1)
#calculate accuracies for different k values
train_accuracy <- sapply(k, function(ks) {
knn_model <- knn3(gdp_impr ~ CLI_lag_nml + CLI_lag2_nml + CLI_lag3_nml +
real_gdp_growth_lag_nml + real_gdp_growth_lag2_nml +
real_gdp_growth_lag3_nml, data = combined_data_train, k = ks)
mean(knn_model$learn$y == combined_data_train$gdp_impr)
})
best_k <- k[which.max(train_accuracy)]
#knn model for optimal k
knn_model <- knn3(gdp_impr ~ CLI_lag + CLI_lag2 + CLI_lag3 + real_gdp_growth_lag + real_gdp_growth_lag2 + real_gdp_growth_lag3, data = combined_data_train, k = best_k)
#wf valid
set.seed(1)
y_hat_knn_wf <- rep(NA, nrow(combined_data_test))
for (i in 1:nrow(combined_data_test)) {
train_window <- combined_data[1:(106 + i - 1), ]
test_window <- combined_data[106 + i, ]
knn_model <- knn3(gdp_impr ~ CLI_lag_nml + CLI_lag2_nml + CLI_lag3_nml +
real_gdp_growth_lag_nml + real_gdp_growth_lag2_nml +
real_gdp_growth_lag3_nml, data = train_window)
y_hat_knn_wf[i] <- predict(knn_model, test_window, type = "class")
}
y_hat_knn_wf <- ifelse(y_hat_knn_wf == 2, 1 , 0)
set.seed(1)
#random forest initial model
rf_model_initial <- randomForest(gdp_impr ~ CLI_lag + CLI_lag2 + CLI_lag3 + real_gdp_growth_lag + real_gdp_growth_lag2 + real_gdp_growth_lag3, data = combined_data_train)
#to see how the model varies with a different number of trees
plot(rf_model_initial, main = "Figure 6: Initial RF Model Error vs. Number of Trees")
#values of mtry to test
m <- seq(1, 6, 1)
#accuracies for different mtry parameter values
set.seed(1)
accuracy <- sapply(m, function(m) {
rf_model <- randomForest(gdp_impr ~ CLI_lag + CLI_lag2 + CLI_lag3 + real_gdp_growth_lag + real_gdp_growth_lag2 + real_gdp_growth_lag3, data = combined_data_train, mtry = m, ntree = 100)
mean(rf_model$y == combined_data_train$gdp_impr)
})
best_m <- m[which.max(accuracy)]
#rf model with optimal mtry parameter
rf_model <- randomForest(gdp_impr ~ CLI_lag + CLI_lag2 + CLI_lag3 + real_gdp_growth_lag + real_gdp_growth_lag2 + real_gdp_growth_lag3, data = combined_data_train, mtry = 1, ntree = 100)
#test to see if any of the normalized data points are outside of 0-1 range
combined_data_test %>%  filter(real_gdp_growth_lag_nml > 1 | real_gdp_growth_lag_nml < 0 |
real_gdp_growth_lag2_nml > 1 | real_gdp_growth_lag2_nml < 0 | real_gdp_growth_lag3_nml > 1 | real_gdp_growth_lag3_nml < 0 |
CLI_lag_nml > 1 | CLI_lag_nml < 0 |
CLI_lag2_nml > 1 | CLI_lag2_nml < 0 |
CLI_lag3_nml > 1 | CLI_lag3_nml < 0)
#commented out since using the wf valid predictions - obsolete
# #knn model test set predictions
# combined_data_test$gdp_impr <- as.factor(combined_data_test$gdp_impr)
# y_hat_knn <- predict(knn_model, newdata = combined_data_test, type = "class")
#rf model test set predictions
y_hat_rf_optimized <- predict(rf_model, newdata = combined_data_test)
#ensemble predictions
predictions_tbl <- data.frame(logit = as.numeric(y_hat_logistic_wf),
reg_logit = as.numeric(y_hat_reglogit),
knn = as.numeric(y_hat_knn_wf),
rf = as.numeric(y_hat_rf_optimized))
#map factor values to numeric values
predictions_tbl <- predictions_tbl %>%
mutate(logit = logit,
reg_logit = reg_logit,
knn = ifelse(knn == 2, 1, 0),
rf = ifelse(rf == 2, 1, 0))
#generate ensemble predictions
y_hat_ensemble <- rep(NA, nrow(predictions_tbl))
for (i in 1:nrow(predictions_tbl)) {
y_hat_ensemble[i] <- ifelse(sum(predictions_tbl[i,]) >= 2, 1, 0)
}
#add ensemble predictions to table of predictions
predictions_tbl <- predictions_tbl %>%
mutate(ensemble = y_hat_ensemble)
#confusion matrix logistic model
confusionMatrix(factor(y_hat_logistic_wf), reference = factor(combined_data_test$gdp_impr))
#calculate f1 score
f1_logit <- F_meas(factor(y_hat_logistic_wf), factor(combined_data_test$gdp_impr))
#confusion matrix knn model
confusionMatrix(factor(y_hat_knn_wf), reference = factor(combined_data_test$gdp_impr))
#calculate f1 score - code won't run since score is 0, because no correct positive predictions
#f1_knn <- F_meas(factor(y_hat_knn), factor(combined_data_test$gdp_impr))
#confusion matrix rf model
confusionMatrix(factor(y_hat_rf_optimized), reference = factor(combined_data_test$gdp_impr))
#calculate F1 score - not possible due to no "0" predictions
#f1_rf <- F_meas(factor(y_hat_rf_optimized), factor(combined_data_test$gdp_impr))
#confusion matrix ensemble prediction
confusionMatrix(factor(y_hat_ensemble), reference = factor(combined_data_test$gdp_impr))
#calculate f1 score
#f1_ensemble <- F_meas(factor(y_hat_ensemble), factor(combined_data_test$gdp_impr))
#add predictions to test set
combined_data_test <- combined_data_test %>%
mutate(logit = factor(y_hat_logistic_wf),
reg_logit = factor(y_hat_reglogit),
knn = y_hat_knn_wf,
rf = y_hat_rf_optimized,
ensemble = factor(y_hat_ensemble))
#plot logit model vs real outcomes
combined_data_test %>% ggplot(aes(x = DATE)) +
geom_point(aes(y = gdp_impr, color = "gdp_impr")) +
geom_point(aes(y = logit, color = "logit")) +
ggtitle("Figure 7: Logit Model Predictions vs. Real Economic Outcomes", subtitle = "Red Indicates a Miss")
#plot knn model vs real outcomes
combined_data_test %>% ggplot(aes(x = DATE)) +
geom_point(aes(y = gdp_impr, color = "gdp_impr")) +
geom_point(aes(y = knn, color = "knn")) +
ggtitle("Figure 8: KNN Model Predictions vs. Real Economic Outcomes", subtitle = "Red Indicates a Miss")
#plot rf model vs real outcomes
combined_data_test %>% ggplot(aes(x = DATE)) +
geom_point(aes(y = gdp_impr, color = "gdp_impr")) +
geom_point(aes(y = rf, color = "rf")) +
ggtitle("Figure 9: Random Forest Model Predictions vs. Real Economic Outcomes", subtitle = "Red Indicates a Miss")
#plot ensemble model vs real outcomes
combined_data_test %>% ggplot(aes(x = DATE)) +
geom_point(aes(y = gdp_impr, color = gdp_impr)) +
geom_point(aes(y = ensemble, color = "ensemble")) +
ggtitle("Figure 10: Ensemble Model Predictions vs. Real Economic Outcomes", subtitle = "Red Indicates a Miss")
y_hat_logistic_wf
length(y_hat_logistic_wf)
y_hat_reglogit
y_hat_rf_optimized
combined_data_test %>% ggplot(aes(x = DATE)) +
geom_point(aes(y = gdp_impr, color = "gdp_impr")) +
geom_point(aes(y = reg_logit, color = "reg_logit")) +
ggtitle("Figure 8: Regularized Logit Model Predictions vs. Real Economic Outcomes",
subtitle = "Red Indicates a Miss")
#add predictions to test set
combined_data_test <- combined_data_test %>%
mutate(logit = factor(y_hat_logistic_wf),
reg_logit = factor(y_hat_reglogit),
knn = factor(y_hat_knn_wf),
rf = y_hat_rf_optimized,
ensemble = factor(y_hat_ensemble))
#plot logit model vs real outcomes
combined_data_test %>% ggplot(aes(x = DATE)) +
geom_point(aes(y = gdp_impr, color = "gdp_impr")) +
geom_point(aes(y = logit, color = "logit")) +
ggtitle("Figure 7: Logit Model Predictions vs. Real Economic Outcomes", subtitle = "Red Indicates a Miss")
length(wf_predictions2)
